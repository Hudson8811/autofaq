{"version":3,"sources":["module.js"],"names":[],"mappingsfile":"../module.min.js","sourcesContent":["import * as THREE from 'three';\r\n//import { RoomEnvironment } from './jsm/environments/RoomEnvironment.js';\r\nimport { OrbitControls } from './jsm/controls/OrbitControls.js';\r\nimport { GLTFLoader } from './jsm/loaders/GLTFLoader.js';\r\n//import { KTX2Loader } from 'js/jsm/loaders/KTX2Loader.js';\r\n//import { MeshoptDecoder } from './jsm/libs/meshopt_decoder.module.js';\r\n\r\nvar mouseX = 0, mouseY = 0;\r\nvar windowHalfX = window.innerWidth / 2;\r\nvar windowHalfY = window.innerHeight / 2;\r\n\r\n$(document).ready(function() {\r\n\tlet camera, scene, renderer;\r\n\tlet spotLight, lightHelper, shadowCameraHelper;\r\n\tinit();\r\n\tanimate();\r\n\r\n\tfunction init() {\r\n\r\n\t\tconst container = document.getElementById('model3d');\r\n\r\n\t\trenderer = new THREE.WebGLRenderer( {  alpha: true, antialias: true } );\r\n\t\trenderer.setPixelRatio( window.devicePixelRatio );\r\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\r\n\t\trenderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n\t\trenderer.toneMappingExposure = 1;\r\n\t\trenderer.setClearColor( 0x000000, 0 );\r\n\t\trenderer.outputEncoding = THREE.sRGBEncoding;\r\n\t\trenderer.shadowMapEnabled = true;\r\n\t\trenderer.shadowMapSoft = true;\r\n\t\tcontainer.appendChild( renderer.domElement );\r\n\r\n\t\tcamera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );\r\n\t\tcamera.position.set( 0, 0, 0 );\r\n\r\n\t\t//const environment = new RoomEnvironment();\r\n\t\t//const pmremGenerator = new THREE.PMREMGenerator( renderer );\r\n\r\n\t\tscene = new THREE.Scene();\r\n\t\t//scene.background = new THREE.Color( 0xffffff );\r\n\t\t//scene.environment = pmremGenerator.fromScene( environment ).texture;\r\n\r\n\r\n\t\t//light\r\n\r\n\t\tconst ambient = new THREE.AmbientLight( 0xffffff, 1 );\r\n\t\tscene.add( ambient );\r\n\r\n\t\t/*\r\n\t\tspotLight = new THREE.SpotLight( 0xffffff, 1 );\r\n\t\tspotLight.position.set( 0, 10, 35 );\r\n\t\tspotLight.angle = Math.PI / 4;\r\n\t\tspotLight.penumbra = 0.1;\r\n\t\tspotLight.decay = 2;\r\n\t\tspotLight.distance = 200;\r\n\r\n\t\tspotLight.castShadow = true;\r\n\t\tspotLight.shadow.camera.far = 200;\r\n\t\tspotLight.shadow.mapSize.width = 256;\r\n\t\tspotLight.shadow.mapSize.height = 256;\r\n\t\tspotLight.shadow.bias = - 0.002;\r\n\t\tspotLight.shadow.radius = 4;\r\n\t\tspotLight.shadow.focus = 1;\r\n\t\tspotLight.shadowDarkness = 1;\r\n\t\tscene.add( spotLight );*/\r\n\r\n\r\n\t\tvar directionalLight = new THREE.DirectionalLight( 0xffffff, 1 );\r\n\r\n\t\tdirectionalLight.position.set( 0, 10, 35 ).normalize();\r\n\t\tdirectionalLight.castShadow = true;\r\n\t\tdirectionalLight.shadow.mapSize.width = 2048;  // default\r\n\t\tdirectionalLight.shadow.mapSize.height = 2048; // default\r\n\t\tdirectionalLight.shadow.camera.near = 0.5;    // default\r\n\t\tdirectionalLight.shadow.camera.far = 1000;     // default\r\n\t\tscene.add( directionalLight );\r\n\r\n\r\n\t\tdirectionalLight = new THREE.DirectionalLight( 0xffffff, 1 );\r\n\r\n\t\tdirectionalLight.position.set( -20, -10, 35 ).normalize();\r\n\t\tdirectionalLight.castShadow = true;\r\n\t\tdirectionalLight.shadow.mapSize.width = 2048;  // default\r\n\t\tdirectionalLight.shadow.mapSize.height = 2048; // default\r\n\t\tdirectionalLight.shadow.camera.near = 0.5;    // default\r\n\t\tdirectionalLight.shadow.camera.far = 1000;     // default\r\n\t\tscene.add( directionalLight );\r\n\r\n/*\r\n\t\tspotLight = new THREE.SpotLight( 0xffffff, 1 );\r\n\t\tspotLight.position.set( -20, -10, 35 );\r\n\t\tspotLight.angle = Math.PI / 4;\r\n\t\tspotLight.penumbra = 0.1;\r\n\t\tspotLight.decay = 2;\r\n\t\tspotLight.distance = 200;\r\n\r\n\t\tspotLight.castShadow = true;\r\n\t\tspotLight.shadow.camera.far = 200;\r\n\t\tspotLight.shadow.mapSize.width = 256;\r\n\t\tspotLight.shadow.mapSize.height = 256;\r\n\t\tspotLight.shadow.bias = - 0.002;\r\n\t\tspotLight.shadow.radius = 4;\r\n\t\tspotLight.shadow.focus = 1;\r\n\t\tspotLight.shadowDarkness = 1;\r\n\t\tscene.add( spotLight );\r\n*/\r\n\r\n\r\n\r\n\r\n\t\tconst loader = new GLTFLoader().setPath( 'images/' );\r\n\r\n\t\tloader.load( 'SA_20_Static.glb', function( gltf ) {\r\n\t\t\tgltf.scene.traverse( function( node ) {\r\n\t\t\t\tif ( node.isMesh ) {\r\n\t\t\t\t\tnode.castShadow = true;\r\n\t\t\t\t\tnode.receiveShadow = true;\r\n\r\n\t\t\t\t\tnode.position.y = 0;\r\n\t\t\t\t\tnode.rotation.x = 1;\r\n\t\t\t\t\tnode.rotation.y = 4;\r\n\t\t\t\t\tnode.rotation.z = 0.4;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\r\n\t\t\tscene.add( gltf.scene );\r\n\t\t} );\r\n\r\n\r\n\t\tconst controls = new OrbitControls( camera, renderer.domElement );\r\n\t\tcontrols.addEventListener( 'change', render ); // use if there is no animation loop\r\n\t\tcontrols.minDistance = 15;\r\n\t\tcontrols.maxDistance = 15;\r\n\t\tcontrols.target.set( 1, 0, 0 );\r\n\t\tcontrols.update();\r\n\r\n\r\n\r\n\t\tdocument.addEventListener( 'mousemove', onDocumentMouseMove, false );\r\n\t\twindow.addEventListener( 'resize', onWindowResize, false );\r\n\t}\r\n\r\n\tfunction onWindowResize() {\r\n\r\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n\t\trender();\r\n\r\n\t}\r\n/*\r\n\r\n\tfunction onWindowResize() {\r\n\t\tif (window.innerWidth > 1000) {\r\n\t\t\twindowHalfX = window.innerWidth / 2;\r\n\t\t\twindowHalfY = window.innerHeight / 2;\r\n\t\t\tcamera.aspect = 465 / 215;\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\t\t\trenderer.setSize( 800, 400 );\r\n\t\t}\r\n\t}*/\r\n\tfunction onDocumentMouseMove( event ) {\r\n\t\tmouseX = ( event.clientX - windowHalfX ) / 2;\r\n\t\tmouseY = ( event.clientY - windowHalfY ) / 2;\r\n\t}\r\n//\r\n\tfunction animate() {\r\n\t\trequestAnimationFrame( animate );\r\n\t\trender();\r\n\t}\r\n\tfunction render() {\r\n\t\t//camera.position.z += ( mouseX - camera.position.z ) * .09;\r\n\t\tscene.traverse(function (child) {\r\n\t\t\tif ( child.isMesh ) {\r\n\t\t\t\tchild.rotation.y = ( mouseX * 0.002  + 3 );\r\n\t\t\t\tchild.rotation.x = ( mouseY * 0.001 + 1 );\r\n\t\t\t\tchild.rotation.z = ( mouseX * 0.001 + 0.4 );\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t\t//camera.position.y += ( - mouseY - camera.position.y ) * .05;\r\n\t\tcamera.lookAt( scene.position );\r\n\t\trenderer.render( scene, camera );\r\n\t}\r\n\r\n\r\n});"]}